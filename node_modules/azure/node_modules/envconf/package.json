{
  "name": "envconf",
  "author": {
    "name": "Microsoft Corporation"
  },
  "contributors": [
    {
      "name": "Block, Glenn",
      "email": "gblock@microsoft.com"
    },
    {
      "name": "Rodrigues, Andre",
      "email": "andrerod@microsoft.com"
    },
    {
      "name": "Tavares, Chris",
      "email": "ctavares@microsoft.com"
    }
  ],
  "version": "0.0.2",
  "description": "a module for express-style programmatic configuration",
  "main": "lib/index.js",
  "tags": [
    "config",
    "environment"
  ],
  "keywords": [
    "config",
    "configuration",
    "environment"
  ],
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "devDependencies": {
    "mocha": "~1.9.0",
    "should": "~1.2.2",
    "sinon": "*",
    "jshint": "*"
  },
  "homepage": "https://github.com/WindowsAzure/envconf",
  "repository": {
    "type": "git",
    "url": "git@github.com:WindowsAzure/envconf.git"
  },
  "bugs": {
    "url": "http://github.com/WindowsAzure/envconf/issues"
  },
  "scripts": {
    "test": "npm -s run-script jshint && npm -s run-script unit",
    "unit": "mocha -R spec",
    "jshint": "jshint lib"
  },
  "readme": "envconf\n===========\n\nThis module makes it easy to use express-style configuration for any application.\nIt allows your users to define separate configuration environments in code\nand switch between sets of configuration via a single environment variable.\n\n\nUsage:\n\n```javascript\n\nvar envconf = require('envconf');\n\nvar c = envconf.createConfig();\n\nc.configure('development', function (c) {\n  c.set('settingOne', 'devValue');\n});\n\nc.configure('production', function (c) {\n  c.set('settingTwo', 'prodValue');\n});\n\nc('development').get('settingOne').should.equal('devValue');\n\nprocess.env.NODE_ENV = 'production';\nc.default.get('settingTwo').should.equal('prodValue');\n```\n\nThe previous code shows picking up the default environment from the NODE_ENV environment variable.\n\nYou can however configure your own environment variables as shown below.\n\n```javascript\n\nvar c2 = envconf.createConfig({ defaultEnvVar: 'MY_LIBRARY_VAR'});\n\nc2.configure('development', function (c) {\n  c.set('settingOne', 'devValue');\n});\n\nc2.configure('production', function (c) {\n  c.set('settingTwo', 'prodValue');\n});\n\nc2('development').get('settingOne').should.equal('devValue');\n\nprocess.env.MY_LIBRARY_VAR = 'production';\nc.default.get('settingTwo').should.equal('prodValue');\n```\n\nDo you want to add helper methods for your specific configuration? It's easy\nwith a config customizer:\n\n```javascript\n\nfunction addConfigHelpers(config) {\n  config.useSql = function (host, db) {\n    config.set('sql host', host);\n    config.set('sql database name', db);\n  }\n}\n\nvar c3 = envconf.createConfig( { customizer: addConfigHelpers });\n\nc3.configure('test', function (c) {\n  c.useSql('testmachine', 'testdb');\n});\n\nc3.configure('production', function (c) {\n  c.useSql('realDatabase', 'actualDb');\n});\n```\n\nAre you making changes to a global configuration in your unit tests, and want\nto ensure you've restored the state after your test? Use a snapshot:\n\n```javascript\n\nvar c4 = envconf.createConfig();\nc4.configure(function (c) {\n  c.set('originalValue', 'one');\n});\n\n// set up contents of c4\n\nvar snapshot = c4.snapshot();\n\nc4.configure(function (c) {\n  c.set('originalValue', 'two');\n});\n\nc4.restore(snapshot);\n\nc4.get('originalValue').should.equal('one');\n```\n\nSnapshot/restore also saves and restores any child configurations.\n",
  "readmeFilename": "README.md",
  "_id": "envconf@0.0.2",
  "_from": "envconf@>= 0.0.2"
}
